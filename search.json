[
  {
    "objectID": "posts/internship-milteny/index.html",
    "href": "posts/internship-milteny/index.html",
    "title": "Internship @ Miltenyi Biotec",
    "section": "",
    "text": "During the internship, I worked with a team following agile principle using Jira and Bitbucket to organize our sprints, tasks, and code. The framework which I was using called Tidymodels. Tidymodels is a collection bundle of R packages which follow the tidyverse principles that can help user to implement for machine learning tasks.\n\nAs describe above, there are multiple packages collected in Tidymodels. (1) rsample provides functions for you so sample your data. (2) parsnip helps you to set up the engine of your machine learning model. (3) recipes can prepare the steps and process you want to include in your analysis. (4) tune offers you different ways to tune hyperparameters. (5) yardstick includes function for evaluating your model performance.\n\nworkflows (or workflowsets if you have multiple models want to run) can structure your codes and perform all the analysis at once.\nThe GET STARTED page is a nice place to get a glance to use Tidymodels framework for machine learning task. If your are familiar with R and want to implement machine learning project with it, I will recommend you to try it out.\nReferences:\n(Kuhn and Wickham 2020)\n\n\n\n\nReferences\n\nKuhn, Max, and Hadley Wickham. 2020. “Tidymodels: A Collection of Packages for Modeling and Machine Learning Using Tidyverse Principles.” https://www.tidymodels.org."
  },
  {
    "objectID": "posts/instagram-account/index.html",
    "href": "posts/instagram-account/index.html",
    "title": "Release my new instagram account",
    "section": "",
    "text": "I am excited and looking forward to see how bigdata.jojo will become!\nLink to bigdata.jojo: click me"
  },
  {
    "objectID": "posts/nextflow-tutorial/index.html",
    "href": "posts/nextflow-tutorial/index.html",
    "title": "Nextflow tutorial",
    "section": "",
    "text": "The popular workflow language Nextflow has released their latest tutorial this year. Find the tutorials here"
  },
  {
    "objectID": "projects/TEKRABber/index.html",
    "href": "projects/TEKRABber/index.html",
    "title": "TEKRABber",
    "section": "",
    "text": "Installation\nFor a stable version, I recommend download TEKRABber from Bioconductor archive.\n\ninstall.packages(\"BiocManager\")\nBiocManager::install(\"TEKRABber\")\n\n\nlibrary(TEKRABber)\nlibrary(SummarizedExperiment) # load it if you are following this tutorial\n\n\n\n1. Comparing between two species\nIn the first example, we randomly generated/picked gene and transposable elements (TE) expression data from 10 humans and 10 chimpanzees (Khrameeva et al. 2020). The values for the first column of gene and TE count table must be Ensembl gene ID and TE name:\n\n# load built-in data\ndata(speciesCounts)\nhmGene <- speciesCounts$hmGene\nhmTE <- speciesCounts$hmTE\nchimpGene <- speciesCounts$chimpGene\nchimpTE <- speciesCounts$chimpTE\n# the first column must be Ensembl gene ID for gene, and TE name for TE\nhead(hmGene)\n\n           Geneid SRR8750453 SRR8750454 SRR8750455 SRR8750456 SRR8750457\n1 ENSG00000000003        250        267        227        286        128\n2 ENSG00000000005         13          2         15          9          5\n3 ENSG00000000419        260        311        159        259        272\n4 ENSG00000000457         86        131        100         94         80\n5 ENSG00000000460         21         17         42         33         55\n6 ENSG00000000938        162         75         95        252        195\n  SRR8750458 SRR8750459 SRR8750460 SRR8750461 SRR8750462\n1        394        268        102        370        244\n2          0          1          8          0          2\n3        408        371        126        211        374\n4        158        119         46         77         81\n5         29         50         11         18         20\n6        137         93        108        197         69\n\n\n\n\n1.1 Ortholog information and normalization\nIn the first step, we use orthologScale() to get orthology information and calculate the scaling factor between two species. The species name needs to be the abbreviation of scientific species name used in Ensembl. (Note: (1)This step queries information using biomaRt and it might need some time or try different mirrors due to the connections to Ensembl (2)It might take some time to calculate scaling factor based on your data size).\n\n# You can use the code below to search for species name\nensembl <- biomaRt::useEnsembl(biomart = \"genes\")\nhead(biomaRt::listDatasets(ensembl))\n\n                       dataset                           description\n1 abrachyrhynchus_gene_ensembl Pink-footed goose genes (ASM259213v1)\n2     acalliptera_gene_ensembl      Eastern happy genes (fAstCal1.2)\n3   acarolinensis_gene_ensembl       Green anole genes (AnoCar2.0v2)\n4    acchrysaetos_gene_ensembl       Golden eagle genes (bAquChr1.2)\n5    acitrinellus_gene_ensembl        Midas cichlid genes (Midas_v5)\n6    amelanoleuca_gene_ensembl       Giant panda genes (ASM200744v2)\n      version\n1 ASM259213v1\n2  fAstCal1.2\n3 AnoCar2.0v2\n4  bAquChr1.2\n5    Midas_v5\n6 ASM200744v2\n\n\n\n# In order to save time, we have save the data for this tutorial.\ndata(fetchDataHmChimp)\nfetchData <- fetchDataHmChimp\n\n# Query the data and calculate scaling factor using orthologScale():\n# fetchData <- orthologScale(\n#     geneCountRef = hmGene,\n#     geneCountCompare = chimpGene,\n#     speciesRef = \"hsapiens\",\n#     speciesCompare = \"ptroglodytes\"\n# )\n\n\n\n1.2 Inputs for differentially expressed (DE) and correlation analysis\nWe use DECorrInputs() to return inputs files for downstream analysis.\n\ninputBundle <- DECorrInputs(\n    orthologTable = fetchData$orthologTable,\n    scaleFactor = fetchData$scaleFactor,\n    geneCountRef = hmGene,\n    geneCountCompare = chimpGene,\n    teCountRef = hmTE,\n    teCountCompare = chimpTE\n)\n\n\n\n1.3 DE analysis\nIn this step, we need to generate a metadata contain species name (i.e., human and chimpanzee). The row names need to be same as the DE input table and the column name must be species (see the example below). Then we use DEgeneTE() to perform DE analysis. When you are comparing samples between two species, the parameter expDesign should be TRUE (as default).\n\nmeta <- data.frame(\n    species = c(rep(\"human\", ncol(hmGene) - 1), \n    rep(\"chimpanzee\", ncol(chimpGene) - 1))\n)\n\nmeta$species <- factor(meta$species, levels = c(\"human\", \"chimpanzee\"))\nrownames(meta) <- colnames(inputBundle$geneInputDESeq2)\nhmchimpDE <- DEgeneTE(\n    geneTable = inputBundle$geneInputDESeq2,\n    teTable = inputBundle$teInputDESeq2,\n    metadata = meta,\n    expDesign = TRUE\n)\n\n\n\n1.4 Correlation analysis\nHere we use corrOrthologTE() to perform correlation estimation comparing each ortholog and TE. This is the most time-consuming step if you have large data. For a quick demonstration, we use a relatively small data. You can specify the correlation method and adjusted p-value method. The default methods are Pearson’s correlation and FDR. Note: For more efficient and specific analysis, you can subset your data in this step to focus on only the orthologs and TEs that you are interested in.\n\n# load built-in data\ndata(speciesCorr)\nhmGeneCorrInput <- assay_tekcorrset(speciesCorr, \"gene\", \"human\")\nhmTECorrInput <- assay_tekcorrset(speciesCorr, \"te\", \"human\")\nchimpGeneCorrInput <- assay_tekcorrset(speciesCorr, \"gene\", \"chimpanzee\")\nchimpTECorrInput <- assay_tekcorrset(speciesCorr, \"te\", \"chimpanzee\")\n\nhmCorrResult <- corrOrthologTE(\n    geneInput = hmGeneCorrInput,\n    teInput = hmTECorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nchimpCorrResult <- corrOrthologTE(\n    geneInput = chimpGeneCorrInput,\n    teInput = chimpTECorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nhead(hmCorrResult)\n\n         geneName      teName      pvalue        coef      padj\n1 ENSG00000143125        L1MD 0.271964872  0.38497828 0.9990235\n2 ENSG00000143125        MSTA 0.335873091  0.34036703 0.9990235\n3 ENSG00000143125  MLT1N2-int 0.966658172  0.01524552 0.9990235\n4 ENSG00000143125       LTR57 0.067870603  0.59794954 0.9990235\n5 ENSG00000143125 HERVK11-int 0.001028058  0.87118988 0.3210294\n6 ENSG00000143125        LTR5 0.855235258 -0.06647109 0.9990235\n\n\n\n\n1.5 Explore results appTEKRABber()\nTEKRABber provides an app function for you to quickly view your result. First, you will need to assign the differentially expressed orthologs/TEs results, correlation results and metadata as global variables: appDE, appRef, appCompare and appMeta. See the following example.\n\n#create global variables for app-use\nappDE <- hmchimpDE\nappRef <- hmCorrResult\nappCompare <- chimpCorrResult\nappMeta <- meta # this is the same one in DE analysis\n\nappTEKRABber()\n\n\nThe Expression tab show selected genes and TEs in boxplot. It also provide DE information and correlation statistics.\n\nIn the Correlation tab page (above figure), you can select your data in scatter plots in three ways. (1) Specify the data point and it will turn red in the distribution of your results (2) Show the distribution of all the data from your correlation results based on their correlation coefficients and adjusted p-value. The blue vertical dashed line indicates the boundary of adjusted p-value is 0.05, and the orange one is for adjusted p-value 0.01 (3) you can click the data points which you are interested in, and it will be listed in the table. You can also drag a certain area to show data points in it.\n\n\n2. Comparing control and treatment in same species\nIf you want to compare selected genes and TEs (1) from different tissue in same species or (2) control and drug treatment in same tissue in same species, please generate all the input files following the input format. Here we show an example data of prepared input files including expression counts from 10 control and 10 treatment samples. The format of input data: row names should be gene name or id, and column name is your sample id (please see details below).\n\n# load built-in data\ndata(ctInputDE)\ngeneInputDE <- ctInputDE$gene\nteInputDE <- ctInputDE$te\n\n# you need to follow the input format as below\nhead(geneInputDE)\n\n                control_1 control_2 control_3 control_4 control_5 treatment_6\nENSG00000180263      1470      2072      1864      2238      2246        2599\nENSG00000185985      1599      1045       946      1642      2199         665\nENSG00000144355       517       380      1211       812        48         388\nENSG00000234003         4         4        14        10         5           9\nENSG00000257342         1         1         1         2         3           3\nENSG00000223953       259       830       133       258       850         504\n                treatment_7 treatment_8 treatment_9 treatment_10\nENSG00000180263        2679        2562        2532         2682\nENSG00000185985        1023        2477        1423         1731\nENSG00000144355         275         633          59          248\nENSG00000234003           4          18          13           22\nENSG00000257342           0           6           1            5\nENSG00000223953        1143        1500         498          864\n\n\n\n\n2.1 DE analysis\nFor DE analysis in the same species, you also use DEgeneTE() function, however, you need to set the parameter expDesign to FALSE. You also need to provide a metadata which this time the column name must be experiment. See demonstration below:\n\nmetaExp <- data.frame(experiment = c(rep(\"control\", 5), rep(\"treatment\", 5)))\nrownames(metaExp) <- colnames(geneInputDE)\nmetaExp$experiment <- factor(\n    metaExp$experiment, \n    levels = c(\"control\", \"treatment\")\n)\n\nresultDE <- DEgeneTE(\n    geneTable = geneInputDE,\n    teTable = teInputDE,\n    metadata = metaExp,\n    expDesign = FALSE\n)\n\n\n\n2.2 Correlation analysis\nFor a quick demonstration to perform correlation of genes and TEs in control and treatment sample, we use relatively small input tables which only include 10 genes and 10 TEs.\n\n# load built-in data\ndata(ctCorr)\ngeneConCorrInput <- assay_tekcorrset(ctCorr, \"gene\", \"control\")\nteConCorrInput <- assay_tekcorrset(ctCorr, \"te\", \"control\")\ngeneTreatCorrInput <- assay_tekcorrset(ctCorr, \"gene\", \"treatment\")\nteTreatCorrInput <- assay_tekcorrset(ctCorr, \"te\", \"treatment\")\n\n# you need to follow the input format as below\nhead(geneConCorrInput)\n\n                control_1 control_2 control_3 control_4 control_5\nENSG00000180263      1470      2072      1864      2238      2246\nENSG00000185985      1599      1045       946      1642      2199\nENSG00000144355       517       380      1211       812        48\nENSG00000234003         4         4        14        10         5\nENSG00000257342         1         1         1         2         3\nENSG00000223953       259       830       133       258       850\n\n\n\ncontrolCorr <- corrOrthologTE(\n    geneInput = geneConCorrInput,\n    teInput = teConCorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\ntreatmentCorr <- corrOrthologTE(\n    geneInput = geneTreatCorrInput,\n    teInput = teTreatCorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nhead(treatmentCorr)\n\n         geneName teName    pvalue       coef      padj\n1 ENSG00000180263    ALU 0.7350708 -0.2096204 0.8750842\n2 ENSG00000180263  AluJb 0.6463988 -0.2814802 0.8729353\n3 ENSG00000180263  AluJo 0.5879945 -0.3296607 0.8399922\n4 ENSG00000180263  AluJr 0.6080013 -0.3130670 0.8563399\n5 ENSG00000180263 AluJr4 0.7158070 -0.2251209 0.8729353\n6 ENSG00000180263  AluSc 0.7130150 -0.2273721 0.8729353\n\n\n\n\n2.3 Explore results appTEKRABber()\n\nappDE <- resultDE\nappRef <- controlCorr\nappCompare <- treatmentCorr\nappMeta <- metaExp\n\nappTEKRABber()\n\n\n\n\nReferences\n\nTEKRABber on Bioconductor: Link\nSource code on Github: Link\n\n\n\n\n\n\nReferences\n\nKhrameeva, Ekaterina, Ilia Kurochkin, Dingding Han, Patricia Guijarro, Sabina Kanton, Malgorzata Santel, Zhengzong Qian, et al. 2020. “Single-cell-resolution transcriptome map of human, chimpanzee, bonobo, and macaque brains.” Genome Research 30 (5): 776–89. https://doi.org/10.1101/gr.256958.119."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yao-Chung",
    "section": "",
    "text": "Aug 15, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\nAll projects"
  },
  {
    "objectID": "index.html#posts",
    "href": "index.html#posts",
    "title": "Yao-Chung",
    "section": "Posts",
    "text": "Posts\n\n\n\n\n  \n\n\n\n\nInternship @ Miltenyi Biotec\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n  \n\n\n\n\nNextflow tutorial\n\n\n\n\n\n\n\n\n\nAug 14, 2022\n\n\n\n\n\n\n  \n\n\n\n\nRelease my new instagram account\n\n\n\n\n\n\n\n\n\nDec 16, 2022\n\n\n\n\n\n\nNo matching items\n\n\nAll posts"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am currently a Ph.D. student at Nowick Lab at the Department of Mathematics and Computer Science, Freie Universität Berlin. My work is mainly focusing on developing algorithms to analyze monoallelic expression data from Alzheimer’s Disease patients. I also develop pipeline to estimate the expression of KRAB-Zinc-Finger genes and transposable elements comparing between two different species. I am fascinated by learning and implement machine learning to solve real world problems!"
  }
]