[
  {
    "objectID": "posts/internship-milteny/index.html",
    "href": "posts/internship-milteny/index.html",
    "title": "Internship @ Miltenyi Biotec",
    "section": "",
    "text": "During the internship, I worked with a team following agile principle using Jira and Bitbucket to organize our sprints, tasks, and code. The framework which I was using called Tidymodels. Tidymodels is a collection bundle of R packages which follow the tidyverse principles that can help user to implement for machine learning tasks.\n\nAs describe above, there are multiple packages collected in Tidymodels. (1) rsample provides functions for you so sample your data. (2) parsnip helps you to set up the engine of your machine learning model. (3) recipes can prepare the steps and process you want to include in your analysis. (4) tune offers you different ways to tune hyperparameters. (5) yardstick includes function for evaluating your model performance.\n\nworkflows (or workflowsets if you have multiple models want to run) can structure your codes and perform all the analysis at once.\nThe GET STARTED page is a nice place to get a glance to use Tidymodels framework for machine learning task. If your are familiar with R and want to implement machine learning project with it, I will recommend you to try it out.\nReferences:\n(Kuhn and Wickham 2020)\n\n\n\n\nReferences\n\nKuhn, Max, and Hadley Wickham. 2020. “Tidymodels: A Collection of Packages for Modeling and Machine Learning Using Tidyverse Principles.” https://www.tidymodels.org."
  },
  {
    "objectID": "posts/python_superclass/index.html",
    "href": "posts/python_superclass/index.html",
    "title": "Super Python: super() a superclass method in python",
    "section": "",
    "text": "To advance my python knowledge, I decided to dig into what super() did in this line. Then I found a really great article on Real Python described the use of suepr() in python. It uses similar geometry shapes to demonstrate how to use super() for object inheritance in python.\nIn this article, I will write down some notes and summarize some key points.\nFirst we look at the figure below as an example:\n\n\n\n\n\nThere are 4 classes of python object. Square object inherit from Rectangle, RightPyramid inherit from Square and Triangle. To avoid repeat code and boundless parameters/arguments in a single class, we can use super(). It also help us to maintain our code. super() function is used to give access to methods and properties of a parent or sibling class. It also returns an object that represents the parent class. (W3School)\n\n\n\nsource: Real Python, https://realpython.com/python-super/\n\n\n(1) This part is to provide for inheritance object to get its parameters, length, width and **kwargs.\n(2) Square class inherit from Rectangle, so you will need to use super() in the instance declaration.\n\n\n\nsource: Real Python, https://realpython.com/python-super/\n\n\n(3) Since previously we have set **kwargs for flexible multiple inheritance, we can access them in a key-value pairs. The RightPyramid class inherit the height from Triangle, and inherit base from Sqaure.\n\n\n\n\n\n\nDanger\n\n\n\nI think the last line in this part should be super( ).__init__(base=base, slant_height=height, **kwargs)\n\n\n(4) I want to point out that different shape has their formula calculating area. You should try to avoid same function name and this will help you maintain your code when your project grows larger.\nOne more other thing is MRO. __mro__ stands for Method Resolution Order (MRO). MRO sets the rule for how a class track back to their inherit object class. The order of classes in the parenthesis can be changed to fit your MRO need.\n\nclass Rectangle:\n    def __init__(self, length, width, **kwargs):\n        self.length = length\n        self.width = width\n        super().__init__(**kwargs)\n\nclass Square(Rectangle):\n    def __init__(self, length, **kwargs):\n        super().__init__(length = length, width=length, **kwargs)\n        \nclass Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n        super().__init__(**kwargs)\n  \n# first track Square and then Triangle        \nclass RightPyramid_1(Square, Triangle):\n    def __init__(self):\n        self.base = base\n\n# first track Triangle and then Square\nclass RightPyramid_2(Triangle, Square):\n    def __init__(self):\n        self.base = base\n        \nprint(RightPyramid_1.__mro__)\nprint(RightPyramid_2.__mro__)\n\n(<class '__main__.RightPyramid_1'>, <class '__main__.Square'>, <class '__main__.Rectangle'>, <class '__main__.Triangle'>, <class 'object'>)\n(<class '__main__.RightPyramid_2'>, <class '__main__.Triangle'>, <class '__main__.Square'>, <class '__main__.Rectangle'>, <class 'object'>)\n\n\nAs the above example shows, RightPyramid_1 and RightPyramid_2 both inherit Square and Triangle class but in different order. You can see if you print their mro ( using __mro__ ), it shows different orders. This sometime will cause problem if you are not using **kwargs.\nReferences:\n\nReal Python: Supercharge your classes with python super()\nW3School: Python super() Function"
  },
  {
    "objectID": "posts/instagram-account/index.html",
    "href": "posts/instagram-account/index.html",
    "title": "Release my new instagram account",
    "section": "",
    "text": "I am excited and looking forward to see how bigdata.jojo will become!\nLink to bigdata.jojo: click me"
  },
  {
    "objectID": "posts/mem_2023/index.html",
    "href": "posts/mem_2023/index.html",
    "title": "2nd Münster Evolution Meeting (MEM 2023)",
    "section": "",
    "text": "Das Schloss Münster\n\n\nDuring these four days of talks and poster sessions, I met a lot of nice people working on different Evolution research. I also gave a presentation on the last day about my current PhD work, Unwinding the regulatory network of KRAB zinc finger genes and transposable elements in the evolution of primate brain, sharing how we measure and compare expression data from humans and non-human-primates’ brain RNA-seq and the development of R Bioconductor package, TEKRABber.\n\n\n\nMy presentation in the last day session (credit: Fatemeh Zebardast)\n\n\n\nThanks to my supervisor, Prof. Dr. Katja Nowick, for supporting me to attend this wonderful conference, and also all the lovely people from the Nowick Lab."
  },
  {
    "objectID": "projects/NCTR_indel/index.html",
    "href": "projects/NCTR_indel/index.html",
    "title": "NCTR Indel Calling Challenge",
    "section": "",
    "text": "This year, precisionFDA has launced an Indel Calling from Oncopanel Sequencing Data Challenge. The aim of this tournament is to let teams to design methods for calling INDEL from onco panel sequencing data. I participate with Bioinformaticians from Taiwan\n\nResults page: https://precision.fda.gov/challenges/22/results"
  },
  {
    "objectID": "projects/appChatGPT/index.html",
    "href": "projects/appChatGPT/index.html",
    "title": "appChatGPT",
    "section": "",
    "text": "The framework used in this project is Streamlit.\n\nCreate a virtual environment for this project, appChatGPT, using virtualenv in PyCharm IDE.\nCreate a askGPT.py file for executing ChatGPT on own computer and set environment API key for security, OPENAI_API_KEY. (Ref)\n\n\nRepo: https://github.com/ferygood/appChatGPT"
  },
  {
    "objectID": "projects/TEKRABber/index.html",
    "href": "projects/TEKRABber/index.html",
    "title": "TEKRABber",
    "section": "",
    "text": "Installation\nFor a stable version, I recommend download TEKRABber from Bioconductor archive.\n\ninstall.packages(\"BiocManager\")\nBiocManager::install(\"TEKRABber\")\n\n\nlibrary(TEKRABber)\nlibrary(SummarizedExperiment) # load it if you are following this tutorial\n\n\n\n1. Comparing between two species\nIn the first example, we randomly generated/picked gene and transposable elements (TE) expression data from 10 humans and 10 chimpanzees (Khrameeva et al. 2020). The values for the first column of gene and TE count table must be Ensembl gene ID and TE name:\n\n# load built-in data\ndata(speciesCounts)\nhmGene <- speciesCounts$hmGene\nhmTE <- speciesCounts$hmTE\nchimpGene <- speciesCounts$chimpGene\nchimpTE <- speciesCounts$chimpTE\n# the first column must be Ensembl gene ID for gene, and TE name for TE\nhead(hmGene)\n\n\n\n1.1 Ortholog information and normalization\nIn the first step, we use orthologScale() to get orthology information and calculate the scaling factor between two species. The species name needs to be the abbreviation of scientific species name used in Ensembl. (Note: (1)This step queries information using biomaRt and it might need some time or try different mirrors due to the connections to Ensembl (2)It might take some time to calculate scaling factor based on your data size). For normalizing TEs, you need to provide a repeatmasker annotation table including four columns, (1) the name of TE (2) the class of TE (3) the average gene length of TE from your reference species (4) the average gene length from the species you want to compare. A way to download repeatmasker annotations is to query from UCSC Genome Table Browser and select the RepeatMasker track.\n\n# You can use the code below to search for species name\nensembl <- biomaRt::useEnsembl(biomart = \"genes\")\nhead(biomaRt::listDatasets(ensembl))\n\n\n# In order to save time, we have save the data for this tutorial.\ndata(fetchDataHmChimp)\nfetchData <- fetchDataHmChimp\n\n# Query the data and calculate scaling factor using orthologScale():\n#' data(speciesCounts)\n#' data(hg38_panTro6_rmsk)\n#' hmGene <- speciesCounts$hmGene\n#' chimpGene <- speciesCounts$chimpGene\n#' hmTE <- speciesCounts$hmTE\n#' chimpTE <- speciesCounts$chimpTE\n#' \n#' ## For demonstration, here we only select 1000 rows to save time\n#' set.seed(1234)\n#' hmGeneSample <- hmGene[sample(nrow(hmGene), 1000), ]\n#' chimpGeneSample <- chimpGene[sample(nrow(chimpGene), 1000), ]\n#' \n#' fetchData <- orthologScale(\n#'     speciesRef = \"hsapiens\",\n#'     speciesCompare = \"ptroglodytes\",\n#'     geneCountRef = hmGeneSample,\n#'     geneCountCompare = chimpGeneSample,\n#'     teCountRef = hmTE,\n#'     teCountCompare = chimpTE,\n#'     rmsk = hg38_panTro6_rmsk\n#' )\n\n\n\n1.2 Inputs for differentially expressed (DE) and correlation analysis\nWe use DECorrInputs() to return inputs files for downstream analysis.\n\ninputBundle <- DECorrInputs(fetchData)\n\n\n\n1.3 DE analysis\nIn this step, we need to generate a metadata contain species name (i.e., human and chimpanzee). The row names need to be same as the DE input table and the column name must be species (see the example below). Then we use DEgeneTE() to perform DE analysis. When you are comparing samples between two species, the parameter expDesign should be TRUE (as default).\n\nmeta <- data.frame(\n    species = c(rep(\"human\", ncol(hmGene) - 1), \n    rep(\"chimpanzee\", ncol(chimpGene) - 1))\n)\n\nmeta$species <- factor(meta$species, levels = c(\"human\", \"chimpanzee\"))\nrownames(meta) <- colnames(inputBundle$geneInputDESeq2)\nhmchimpDE <- DEgeneTE(\n    geneTable = inputBundle$geneInputDESeq2,\n    teTable = inputBundle$teInputDESeq2,\n    metadata = meta,\n    expDesign = TRUE\n)\n\n\n\n1.4 Correlation analysis\nHere we use corrOrthologTE() to perform correlation estimation comparing each ortholog and TE. This is the most time-consuming step if you have large data. For a quick demonstration, we use a relatively small data. You can specify the correlation method and adjusted p-value method. The default methods are Pearson’s correlation and FDR. Note: For more efficient and specific analysis, you can subset your data in this step to focus on only the orthologs and TEs that you are interested in.\n\n# load built-in data\ndata(speciesCorr)\nhmGeneCorrInput <- assay_tekcorrset(speciesCorr, \"gene\", \"human\")\nhmTECorrInput <- assay_tekcorrset(speciesCorr, \"te\", \"human\")\nchimpGeneCorrInput <- assay_tekcorrset(speciesCorr, \"gene\", \"chimpanzee\")\nchimpTECorrInput <- assay_tekcorrset(speciesCorr, \"te\", \"chimpanzee\")\n\nhmCorrResult <- corrOrthologTE(\n    geneInput = hmGeneCorrInput,\n    teInput = hmTECorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nchimpCorrResult <- corrOrthologTE(\n    geneInput = chimpGeneCorrInput,\n    teInput = chimpTECorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nhead(hmCorrResult)\n\n\n\n1.5 Explore results appTEKRABber()\nTEKRABber provides an app function for you to quickly view your result. First, you will need to assign the differentially expressed orthologs/TEs results, correlation results and metadata as global variables: appDE, appRef, appCompare and appMeta. See the following example.\n\n#create global variables for app-use\nappDE <- hmchimpDE\nappRef <- hmCorrResult\nappCompare <- chimpCorrResult\nappMeta <- meta # this is the same one in DE analysis\n\nappTEKRABber()\n\n\nThe Expression tab show selected genes and TEs in boxplot. It also provide DE information and correlation statistics.\n\nIn the Correlation tab page (above figure), you can select your data in scatter plots in three ways. (1) Specify the data point and it will turn red in the distribution of your results (2) Show the distribution of all the data from your correlation results based on their correlation coefficients and adjusted p-value. The blue vertical dashed line indicates the boundary of adjusted p-value is 0.05, and the orange one is for adjusted p-value 0.01 (3) you can click the data points which you are interested in, and it will be listed in the table. You can also drag a certain area to show data points in it.\n\n\n2. Comparing control and treatment in same species\nIf you want to compare selected genes and TEs (1) from different tissue in same species or (2) control and drug treatment in same tissue in same species, please generate all the input files following the input format. Here we show an example data of prepared input files including expression counts from 10 control and 10 treatment samples. The format of input data: row names should be gene name or id, and column name is your sample id (please see details below).\n\n# load built-in data\ndata(ctInputDE)\ngeneInputDE <- ctInputDE$gene\nteInputDE <- ctInputDE$te\n\n# you need to follow the input format as below\nhead(geneInputDE)\n\n\n\n2.1 DE analysis\nFor DE analysis in the same species, you also use DEgeneTE() function, however, you need to set the parameter expDesign to FALSE. You also need to provide a metadata which this time the column name must be experiment. See demonstration below:\n\nmetaExp <- data.frame(experiment = c(rep(\"control\", 5), rep(\"treatment\", 5)))\nrownames(metaExp) <- colnames(geneInputDE)\nmetaExp$experiment <- factor(\n    metaExp$experiment, \n    levels = c(\"control\", \"treatment\")\n)\n\nresultDE <- DEgeneTE(\n    geneTable = geneInputDE,\n    teTable = teInputDE,\n    metadata = metaExp,\n    expDesign = FALSE\n)\n\n\n\n2.2 Correlation analysis\nFor a quick demonstration to perform correlation of genes and TEs in control and treatment sample, we use relatively small input tables which only include 10 genes and 10 TEs.\n\n# load built-in data\ndata(ctCorr)\ngeneConCorrInput <- assay_tekcorrset(ctCorr, \"gene\", \"control\")\nteConCorrInput <- assay_tekcorrset(ctCorr, \"te\", \"control\")\ngeneTreatCorrInput <- assay_tekcorrset(ctCorr, \"gene\", \"treatment\")\nteTreatCorrInput <- assay_tekcorrset(ctCorr, \"te\", \"treatment\")\n\n# you need to follow the input format as below\nhead(geneConCorrInput)\n\n\ncontrolCorr <- corrOrthologTE(\n    geneInput = geneConCorrInput,\n    teInput = teConCorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\ntreatmentCorr <- corrOrthologTE(\n    geneInput = geneTreatCorrInput,\n    teInput = teTreatCorrInput,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nhead(treatmentCorr)\n\n\n\n2.3 Explore results appTEKRABber()\n\nappDE <- resultDE\nappRef <- controlCorr\nappCompare <- treatmentCorr\nappMeta <- metaExp\n\nappTEKRABber()\n\n\n\n\nReferences\n\nTEKRABber on Bioconductor: Link\nSource code on Github: Link\n\n\n\n\n\n\nReferences\n\nKhrameeva, Ekaterina, Ilia Kurochkin, Dingding Han, Patricia Guijarro, Sabina Kanton, Malgorzata Santel, Zhengzong Qian, et al. 2020. “Single-cell-resolution transcriptome map of human, chimpanzee, bonobo, and macaque brains.” Genome Research 30 (5): 776–89. https://doi.org/10.1101/gr.256958.119."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yao-Chung",
    "section": "",
    "text": "Mar 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\nAll posts"
  },
  {
    "objectID": "index.html#projects",
    "href": "index.html#projects",
    "title": "Yao-Chung",
    "section": "Projects",
    "text": "Projects\n\n\n\n\n\n\n \n\n\n\nappChatGPT\n\n\n\nFeb 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNCTR Indel Calling Challenge\n\n\n\nSep 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTEKRABber\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\nAll projects"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am currently a Ph.D. student at Nowick Lab at the Department of Mathematics and Computer Science, Freie Universität Berlin. My work is mainly focusing on developing algorithms to analyze monoallelic expression data from Alzheimer’s Disease patients. I also develop pipeline to estimate the expression of KRAB-Zinc-Finger genes and transposable elements comparing between two different species. I am fascinated by learning and implement machine learning to solve real world problems!"
  }
]