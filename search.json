[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am currently a Ph.D. student at Nowick Lab at the Department of Mathematics and Computer Science, Freie Universität Berlin. My work is mainly focusing on developing algorithms to analyze monoallelic expression data from Alzheimer’s Disease patients. I also develop pipeline to estimate the expression of KRAB-Zinc-Finger genes and transposable elements comparing between two different species. I am fascinated by learning and implement machine learning to solve real world problems!"
  },
  {
    "objectID": "projects/biorxiv-TEKRABber/index.html",
    "href": "projects/biorxiv-TEKRABber/index.html",
    "title": "PhD paper on bioRxiv",
    "section": "",
    "text": "In December, I published the outcomes of my doctoral research as a preprint on bioRxiv (M. Chen Nowick 2024) . The article focuses on the analysis of orthologs and transposable elements relationships across species and under different conditions using the R software TEKRABber (Y.-C. Chen and Nowick 2023), which I developed. This software stands out for its ability to analyze the most common RNA-seq data, and its key correlation calculations are enhanced for computational speed using RCpp (C++).\n\n\n\n\n\nAs of January, the software is ranked 925 out of 2266 on Bioconductor, the largest open-source platform for bioinformatics. Our next step involves submitting this article to a scientific journal.\n\n\n\n\nReferences\n\nChen, Maupas, Nowick. 2024. “Regulatory Networks of KRAB Zinc Finger Genes and Transposable Elements Changed During Human Brain Evolution and Disease.” bioRxiv. https://doi.org/10.1101/2023.12.18.569574.\n\n\nChen, Yao-Chung, and Katja Nowick. 2023. “TEKRABber: An r Package Estimates the Correlations of Orthologs and Transposable Elements Between Two Species.” https://doi.org/10.18129/B9.bioc.TEKRABber."
  },
  {
    "objectID": "projects/TEKRABber/index.html",
    "href": "projects/TEKRABber/index.html",
    "title": "TEKRABber",
    "section": "",
    "text": "TEKRABber is a Bioconductor package I published early this year (currently rank 925/2266 on Bioconductor) (Chen 2024). It is made to provide a user-friendly pipeline for comparing orthologs and transposable elements (TEs) between two species. It considers the orthology confidence between two species from BioMart to normalize expression counts and detect differentially expressed orthologs/TEs. Then it provides one to one correlation analysis for desired orthologs and TEs. There is also an app function to have a first insight on the result. Users can prepare orthologs/TEs RNA-seq expression data by their own preference to run TEKRABber following the data structure mentioned in the following demo.\nAlthough TEKRABber is developed to compare between species, you can still use it for experiment which compare control and treatment in the same species. If you are more interest in this, you may directly jump to the second half of this article."
  },
  {
    "objectID": "projects/TEKRABber/index.html#comparing-between-two-species-human-and-chimpanzee-as-an-example",
    "href": "projects/TEKRABber/index.html#comparing-between-two-species-human-and-chimpanzee-as-an-example",
    "title": "TEKRABber",
    "section": "Comparing between two species, human and chimpanzee as an example",
    "text": "Comparing between two species, human and chimpanzee as an example\nGene and TE expression data are generated from randomly picked brain regions FASTQ files from 10 humans and 10 chimpanzees (Khrameeva et al. 2020). The values for the first column of gene and TE count table must be Ensembl gene ID and TE name:\n\n# load built-in data\ndata(speciesCounts)\nhmGene &lt;- speciesCounts$hmGene\nhmTE &lt;- speciesCounts$hmTE\nchimpGene &lt;- speciesCounts$chimpGene\nchimpTE &lt;- speciesCounts$chimpTE\n# the first column must be Ensembl gene ID for gene, and TE name for TE\nhead(hmGene)\n\n\nQuery ortholog information and estimate scaling factor\nIn the first step, we use orthologScale() to get orthology information and calculate the scaling factor between two species for normalizing orthologous genes. The species name needs to be the abbreviation of scientific species name used in Ensembl. (Note: (1)This step queries information using biomaRt and it might need some time or try different mirrors due to the connections to Ensembl (2)It might take some time to calculate scaling factor based on your data size). For normalizing TEs, you need to provide a repeatmasker annotation table including four columns, (1) the name of TE (2) the class of TE (3) the average gene length of TE from your reference species (4) the average gene length from the species you want to compare. A way to download repeatmasker annotations is to query from UCSC Genome Table Browser and select the RepeatMasker track.\n\n# You can use the code below to search for species name\nensembl &lt;- biomaRt::useEnsembl(biomart = \"genes\")\nbiomaRt::listDatasets(ensembl)\n\n\n# In order to save time, we provide the data for this tutorial.\n# you can also uncomment the code below and run it for yourself.\ndata(fetchDataHmChimp)\nfetchData &lt;- fetchDataHmChimp\n\n# Query the data and calculate scaling factor using orthologScale():\n#' data(speciesCounts)\n#' data(hg38_panTro6_rmsk)\n#' hmGene &lt;- speciesCounts$hmGene\n#' chimpGene &lt;- speciesCounts$chimpGene\n#' hmTE &lt;- speciesCounts$hmTE\n#' chimpTE &lt;- speciesCounts$chimpTE\n#' \n#' ## For demonstration, here we only select 1000 rows to save time\n#' set.seed(1234)\n#' hmGeneSample &lt;- hmGene[sample(nrow(hmGene), 1000), ]\n#' chimpGeneSample &lt;- chimpGene[sample(nrow(chimpGene), 1000), ]\n#' \n#' fetchData &lt;- orthologScale(\n#'     speciesRef = \"hsapiens\",\n#'     speciesCompare = \"ptroglodytes\",\n#'     geneCountRef = hmGeneSample,\n#'     geneCountCompare = chimpGeneSample,\n#'     teCountRef = hmTE,\n#'     teCountCompare = chimpTE,\n#'     rmsk = hg38_panTro6_rmsk\n#' )\n\n\n\nCreate inputs for differentially expressed analysis and correlation estimation\nWe use DECorrInputs() to return input files for downstream analysis.\n\ninputBundle &lt;- DECorrInputs(fetchData)\n\n\n\nDifferentially expressed analysis (DE analysis)\nIn this step, we need to generate a metadata contain species name (i.e., human and chimpanzee). The row names need to be same as the DE input table and the column name must be species (see the example below). Then we use DEgeneTE() to perform DE analysis. When you are comparing samples between two species, the parameter expDesign should be TRUE (as default).\n\nmeta &lt;- data.frame(\n    species = c(rep(\"human\", ncol(hmGene) - 1), \n    rep(\"chimpanzee\", ncol(chimpGene) - 1))\n)\n\nmeta$species &lt;- factor(meta$species, levels = c(\"human\", \"chimpanzee\"))\nrownames(meta) &lt;- colnames(inputBundle$geneInputDESeq2)\nhmchimpDE &lt;- DEgeneTE(\n    geneTable = inputBundle$geneInputDESeq2,\n    teTable = inputBundle$teInputDESeq2,\n    metadata = meta,\n    expDesign = TRUE\n)\n\n\n\nCorrelation analysis\nHere we use corrOrthologTE() to perform correlation estimation comparing each ortholog and TE. This is the most time-consuming step if you have large data. For a quick demonstration, we use a relatively small data. You can specify the correlation method and adjusted p-value method. The default methods are Pearson’s correlation and FDR. Note: For more efficient and specific analysis, you can subset your data in this step to focus on only the orthologs and TEs that you are interested in.\n\n# we select the 200 rows of genes for demo\nhmCorrResult &lt;- corrOrthologTE(\n    geneInput = hmchimpDE$geneCorrInputRef[c(1:200),],\n    teInput = hmchimpDE$teCorrInputRef,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nchimpCorrResult &lt;- corrOrthologTE(\n    geneInput = hmchimpDE$geneCorrInputCompare[c(1:200), ],\n    teInput = hmchimpDE$teCorrInputCompare,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\n\n\nExplore your result using appTEKRABber():\nTEKRABber provides an app function called appTEKRABber() for you to quickly view your result and select data that you are interested in. You will need to install gridlayout to run appTEKRABber() function. Note: you might need to installed additional packages to run this function.\n\nremotes::install_github('rstudio/gridlayout')\nlibrary(plotly)\nappTEKRABber(\n    corrRef = hmCorrResult,\n    corrCompare = chimpCorrResult,\n    DEobject = hmchimpDE\n)\n\n\nThe first time you opeining the app, you will see the distribution of Gene and TE alongside pvalue axis and coefficient axis in your reference group and comparision group. You can next select the Gene Name and Transposable Elements which will plot a scatterplot indicating their correlations, and also a expression plot showing the differentially expression analysis. This help you to have a first glance at the pair of Gene:TE which you are interested in."
  },
  {
    "objectID": "projects/TEKRABber/index.html#comparing-control-and-treatment-samples-within-the-same-species",
    "href": "projects/TEKRABber/index.html#comparing-control-and-treatment-samples-within-the-same-species",
    "title": "TEKRABber",
    "section": "Comparing control and treatment samples within the same species",
    "text": "Comparing control and treatment samples within the same species\nIf you want to compare selected genes and TEs (1) from different tissue in same species or (2) control and drug treatment in same tissue in same species, please generate all the input files following the input format. Here we show an example data of prepared input files including expression counts from 10 control and 10 treatment samples. The format of input data: row names should be gene name or id, and column name is your sample id (please see details below).\n\n# load built-in data\ndata(ctInputDE)\ngeneInputDE &lt;- ctInputDE$gene\nteInputDE &lt;- ctInputDE$te\n\n# you need to follow the input format as below\nhead(geneInputDE)\n\n\nDE analysis\nFor DE analysis in the same species, you also use DEgeneTE() function, however, you need to set the parameter expDesign to FALSE. You also need to provide a metadata which this time the column name must be experiment. See demonstration below:\n\nmetaExp &lt;- data.frame(experiment = c(rep(\"control\", 5), rep(\"treatment\", 5)))\nrownames(metaExp) &lt;- colnames(geneInputDE)\nmetaExp$experiment &lt;- factor(\n    metaExp$experiment, \n    levels = c(\"control\", \"treatment\")\n)\n\nresultDE &lt;- DEgeneTE(\n    geneTable = geneInputDE,\n    teTable = teInputDE,\n    metadata = metaExp,\n    expDesign = FALSE\n)\n\n\n\nCorrelation analysis\nHere we demonstrate using the first 200 rows of genes and all the TEs to calculate their correlations.\n\ncontrolCorr &lt;- corrOrthologTE(\n    geneInput = resultDE$geneCorrInputRef[c(1:200),],\n    teInput = resultDE$teCorrInputRef,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\ntreatmentCorr &lt;- corrOrthologTE(\n    geneInput = resultDE$geneCorrInputCompare[c(1:200),],\n    teInput = resultDE$teCorrInputCompare,\n    corrMethod = \"pearson\",\n    padjMethod = \"fdr\"\n)\n\nhead(treatmentCorr)\n\n\n\nExplore your result using appTEKRABber():\n\nremotes::install_github('rstudio/gridlayout')\nappTEKRABber(\n    corrRef = controlCorr,\n    corrCompare = treatmentCorr,\n    DEobject = resultDE\n)"
  },
  {
    "objectID": "posts/bayer-dcc23/index.html",
    "href": "posts/bayer-dcc23/index.html",
    "title": "Bayer Digital Campus Challenge 2023",
    "section": "",
    "text": "In recent years, the rise of artificial intelligence has led to various major companies organizing related campus competitions. While studying in Germany, I have been particularly interested in Bayer’s annual Digital Campus Challenge (DCC). In 2023, I finally teamed up with a good friend, Yu-Chia, and registered for the Clinical Data Science category. Our two-person team, named “Antifungal Linguist,” utilized distillation step-by-step techniques to create a language model for drug exploration. Throughout the competition, we successfully developed a prototype and applied machine learning, large language models, and tools such as PyTorch, HuggingFace, resulting in promising preliminary results.\n\n\n\n\n\n\n\n\nScreenshot of our Antifungal Linguist Prototype\n\n\nAmong the total 813 participants from 61 different countries formed 290 teams, we stood out and secured the championship in clinical data science, earning the opportunity to participate in the final round. This was a rare experience, especially being able to discuss our project with Bayer’s employees and promote our idea.\n\n\n\nWe are one of the Finalist in DCC23\n\n\nResources:\n\nFinale YouTube Link\nMain webpage of DCC23\nAntifungal Linguist Prototype"
  },
  {
    "objectID": "posts/python_superclass/index.html",
    "href": "posts/python_superclass/index.html",
    "title": "Super Python: super() a superclass method in python",
    "section": "",
    "text": "When I was reading the tutorials on PyTorch, I encounter a function called super() in python:\n\nTo advance my python knowledge, I decided to dig into what super() did in this line. Then I found a really great article on Real Python described the use of suepr() in python. It uses similar geometry shapes to demonstrate how to use super() for object inheritance in python.\nIn this article, I will write down some notes and summarize some key points.\nFirst we look at the figure below as an example:\n\n\n\n\n\nThere are 4 classes of python object. Square object inherit from Rectangle, RightPyramid inherit from Square and Triangle. To avoid repeat code and boundless parameters/arguments in a single class, we can use super(). It also help us to maintain our code. super() function is used to give access to methods and properties of a parent or sibling class. It also returns an object that represents the parent class. (W3School)\n\n\n\nsource: Real Python, https://realpython.com/python-super/\n\n\n(1) This part is to provide for inheritance object to get its parameters, length, width and **kwargs.\n(2) Square class inherit from Rectangle, so you will need to use super() in the instance declaration.\n\n\n\nsource: Real Python, https://realpython.com/python-super/\n\n\n(3) Since previously we have set **kwargs for flexible multiple inheritance, we can access them in a key-value pairs. The RightPyramid class inherit the height from Triangle, and inherit base from Sqaure.\n\n\n\n\n\n\nCaution\n\n\n\nI think the last line in this part should be super( ).__init__(base=base, slant_height=height, **kwargs)\n\n\n(4) I want to point out that different shape has their formula calculating area. You should try to avoid same function name and this will help you maintain your code when your project grows larger.\nOne more other thing is MRO. __mro__ stands for Method Resolution Order (MRO). MRO sets the rule for how a class track back to their inherit object class. The order of classes in the parenthesis can be changed to fit your MRO need.\n\nclass Rectangle:\n    def __init__(self, length, width, **kwargs):\n        self.length = length\n        self.width = width\n        super().__init__(**kwargs)\n\nclass Square(Rectangle):\n    def __init__(self, length, **kwargs):\n        super().__init__(length = length, width=length, **kwargs)\n        \nclass Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n        super().__init__(**kwargs)\n  \n# first track Square and then Triangle        \nclass RightPyramid_1(Square, Triangle):\n    def __init__(self):\n        self.base = base\n\n# first track Triangle and then Square\nclass RightPyramid_2(Triangle, Square):\n    def __init__(self):\n        self.base = base\n        \nprint(RightPyramid_1.__mro__)\nprint(RightPyramid_2.__mro__)\n\n(&lt;class '__main__.RightPyramid_1'&gt;, &lt;class '__main__.Square'&gt;, &lt;class '__main__.Rectangle'&gt;, &lt;class '__main__.Triangle'&gt;, &lt;class 'object'&gt;)\n(&lt;class '__main__.RightPyramid_2'&gt;, &lt;class '__main__.Triangle'&gt;, &lt;class '__main__.Square'&gt;, &lt;class '__main__.Rectangle'&gt;, &lt;class 'object'&gt;)\n\n\nAs the above example shows, RightPyramid_1 and RightPyramid_2 both inherit Square and Triangle class but in different order. You can see if you print their mro ( using __mro__ ), it shows different orders. This sometime will cause problem if you are not using **kwargs.\nReferences:\n\nReal Python: Supercharge your classes with python super()\nW3School: Python super() Function"
  },
  {
    "objectID": "posts/internship-milteny/index.html",
    "href": "posts/internship-milteny/index.html",
    "title": "Internship @ Miltenyi Biotec",
    "section": "",
    "text": "I was doing a 3-month internship from September to November at Miltenyi Biotec. The topic of my internship was to develop a pipeline of training a machine learning model to predict different cell-types from flow cytometry data.\nDuring the internship, I worked with a team following agile principle using Jira and Bitbucket to organize our sprints, tasks, and code. The framework which I was using called Tidymodels. Tidymodels is a collection bundle of R packages which follow the tidyverse principles that can help user to implement for machine learning tasks.\n\nAs describe above, there are multiple packages collected in Tidymodels. (1) rsample provides functions for you so sample your data. (2) parsnip helps you to set up the engine of your machine learning model. (3) recipes can prepare the steps and process you want to include in your analysis. (4) tune offers you different ways to tune hyperparameters. (5) yardstick includes function for evaluating your model performance.\n\nworkflows (or workflowsets if you have multiple models want to run) can structure your codes and perform all the analysis at once.\nThe GET STARTED page is a nice place to get a glance to use Tidymodels framework for machine learning task. If your are familiar with R and want to implement machine learning project with it, I will recommend you to try it out.\nReferences:\n(Kuhn and Wickham 2020)\n\n\n\n\nReferences\n\nKuhn, Max, and Hadley Wickham. 2020. “Tidymodels: A Collection of Packages for Modeling and Machine Learning Using Tidyverse Principles.” https://www.tidymodels.org."
  },
  {
    "objectID": "posts/eurobioc2024/index.html",
    "href": "posts/eurobioc2024/index.html",
    "title": "EuroBioC2024 Conference",
    "section": "",
    "text": "From September 3rd to 6th, I had the incredible opportunity to attend EuroBioC2024 (2024 European Bioconductor Conference, https://eurobioc2024.bioconductor.org/) at the University of Oxford. As a Bioconductor software developer, this was my first time participating in this conference, and it was an inspiring and eye-opening experience.\n\nMeeting with many talented developers, I learned about the bioinformatic software currently in development or soon to be submitted to the Bioconductor platform, and explore how these tools could shape the future of bioinformatics. This year, the topics heavily focused on spatial transcriptomic analysis.\nDuring the conference, I delivered an oral presentation on my software, TEKRABber, demonstrating its capability to analyze cross-species RNA-seq data effectively. Sharing my work with audiences from different fields and receiving constructive feedback was truly rewarding.\n\nAfter the conference, I took some time to explore Christ Church College, famously known as the inspiration for the Harry Potter films. The rich history and stunning architecture added a magical touch to end of my visit.\n\nI highly recommend this conference to software developer and scientist/student who are interested in bioinformatics. You do not neccessarily to be a developer. I also meet master students who just enter this field.\nIf you’re curious, keep an eye on the latest updates and announcements from EuroBioC! More interesting events can be found on their online calendar: https://www.bioconductor.org/help/events/"
  },
  {
    "objectID": "posts/instagram-account/index.html",
    "href": "posts/instagram-account/index.html",
    "title": "Release my new instagram account",
    "section": "",
    "text": "I decide to create an Instagram account, bigdata.jojo, to record and share what I have learned from doing machine learning project. The idea of this name is referring to we are living in the flow of big data and combine with my favorite Japanese manga series, JoJo’s Bizarre Adventure.\nI am excited and looking forward to see how bigdata.jojo will become!\nLink to bigdata.jojo: click me"
  },
  {
    "objectID": "posts/mem_2023/index.html",
    "href": "posts/mem_2023/index.html",
    "title": "2nd Münster Evolution Meeting (MEM 2023)",
    "section": "",
    "text": "The 2nd Münster Evolution Meeting (MEM) was held at the Aula Schloss (Schlossplatz 2, 48149 Münster, Germany) from 13 - 16 March this year. This conference meeting seeks to bring together Evolutionary Biologists from a varies of disciplines in order to foster dialogue and collaboration.\n\n\n\nDas Schloss Münster\n\n\nDuring these four days of talks and poster sessions, I met a lot of nice people working on different Evolution research. I also gave a presentation on the last day about my current PhD work, Unwinding the regulatory network of KRAB zinc finger genes and transposable elements in the evolution of primate brain, sharing how we measure and compare expression data from humans and non-human-primates’ brain RNA-seq and the development of R Bioconductor package, TEKRABber.\n\n\n\nMy presentation in the last day session (credit: Fatemeh Zebardast)\n\n\n\nThanks to my supervisor, Prof. Dr. Katja Nowick, for supporting me to attend this wonderful conference, and also all the lovely people from the Nowick Lab."
  },
  {
    "objectID": "projects/NCTR_indel/index.html",
    "href": "projects/NCTR_indel/index.html",
    "title": "NCTR Indel Calling Challenge",
    "section": "",
    "text": "Abstract\nThis year, precisionFDA has launched an Indel Calling from Oncopanel Sequencing Data Challenge. The aim of this tournament is to allow teams to design methods for calling indels from oncopanel sequencing data. I participated with bioinformaticians from Taiwan and developed a machine learning algorithm pipeline utilizing tools such as BWA, SAMtools, BCFTOOLS, DRAGMAP, Strelka, and SomaticSeq. In the end, I was selected as one of the top performers in Best Precision (see figure below). It was a great experience working with my teammates and competing against other talented participants, including the DRAGEN team from Illumina. We also thank Microsoft Azure for providing the computational resource server.\n\nResults page: https://precision.fda.gov/challenges/22/results"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yao-Chung",
    "section": "",
    "text": "Sep 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\nAll posts"
  },
  {
    "objectID": "index.html#posts",
    "href": "index.html#posts",
    "title": "Yao-Chung",
    "section": "",
    "text": "Sep 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\nAll posts"
  },
  {
    "objectID": "index.html#projects",
    "href": "index.html#projects",
    "title": "Yao-Chung",
    "section": "Projects",
    "text": "Projects\n\n\n\n\n\n\n\n\nPhD paper on bioRxiv\n\n\n\nDec 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nNCTR Indel Calling Challenge\n\n\n\nSep 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nTEKRABber\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\nAll projects"
  }
]